1. What is docker?
	- It helps creating isolated environments within the system
	- Is useful for environment set up

2. Docker is written in GO language and is therefore fast.

3. Docker architecture
	- It works on a client server architecture
	- Docker CLI acts as a client
	- Docker daemon acts as a server which executes the commands
	- The commands from CLI and output from docker daemon transfers through rest.



4. Container VS Virtual Machine
	- Container is light weight where as VM has its own OS and it uses hypervisor therefore heavy


5. What is DockerFile?
	- used to containerize an application.
	- It is a portable file that helps sharing an application. along with its environment.

6. Docker compose
	- to run multiple containers

Docker compose file vs dockerfile

6. Docker container vs docker image
	Container - Running instance of an application
	Image - A template of an application

7. ENTRYPOINT vs CMD in dockerfile
	- CMD can be overridden by passing as an argument in cli but entrypoint cannot be overridden
	CMD. Sets default parameters that can be overridden from the Docker Command Line Interface (CLI) when a container is running.
	ENTRYPOINT. Default parameters that cannot be overridden when Docker Containers run with CLI parameters.



Docker container Commands
	1. docker run <image_name>
		 - Create a container using the image if it exists
		 - Pulls the image from hub.docker.com and then creates a container if image does not exists
		 * 	docker run -it <image_name>
		 	- Runs container in interactive mode i.e opens docker container cli

		 * docker run -d <image_name>
		 	- runs image in detached mode


	3. docker exec <container> <cmd>
		- Execute the docker command from system terminal and returns the output to the system terminal only

		* ocker exec -it <container> bash

	5. docker <container> start

	6. docker <container> stop

	7. docker ps 
		- listing all the running containers

	8. docker container ls
		* docker container ls -a

	9. docker run -it -p 3000:3000 <container/image>
		- to start a container with port mapping





Image commands
	1. docker image ls, docker images

	2. docker image rm <image_name> or docker rmi <img_id/img_name>

	3. docker image save <image_name>

	4. docker image push <image_hash/name>

	5. docker image inspect

	6. docker image prune -a
		- Removes all unused images and list the images deleted and memory freed.

	7. docker pull <image_name>

	8. docker pull <image>


Docker Network
	1. docker network create -d bridge my-net

	2.  docker network rm my-net

	3. docker create --name <container_alias> --network <network_name> --publish 8080:80 <image>
		- Creating a new container and add it to the network 

	4. docker network connect <network_name> <container_name>
		- To connect a running container to a network




* docker container create vs run
	- Create command is used to create the container before hand and can be started later using docker start
	- run command creates and runs a container with all its processes

* docker container kill vs stop
	- stop can allow safe termination (within the grace period) while kill terminates immediately.
	- docker kill <container_name or id>
	- docker stop <container_name or id>


Ping container
	- Checking if two containers are connected when they are in same network 
	- Docker uses bridge network by default
	- ping <container_ip>

	* To get the ip address of a network docker inspect <container id> | grep "IPAddress"


docker volume 
	flag to mount 



Read - 	
Multi stage docker file
kill vs stop



Task-
	1. Create a dockerfile using entrypoint, cmd and both together.
	2. Where does the docker image, volume,  and containers get stored.
	3. Create a list of the commands explored.
	4. Read about docker network types
		- host network
		- overlay network
		- Bridge network

	- bridge:	The default network driver.
	- host	Remove network isolation between the container and the Docker host.
	- none	Completely isolate a container from the host and other containers.
	- overlay	Overlay networks connect multiple Docker daemons together.
	- ipvlan	IPvlan networks provide full control over both IPv4 and IPv6 addressing.
	macvlan	Assign a MAC address to a container.
	
	5. check out docker image file
	6. Create an env variable in a docker file and run the image with args passed
	7. Create two docker compose files 
		- for postgres, pgadmin, redis, services
		- mongodb, mongodb gui, services, admin 


Doubts-
	- After deleting image using docker image prune -a they are showed to be untagged what does that mean
	- How to do port mapping when container is already created.
	- Why do we give tag name along with image name in docker compose file 
	- Env var in dockerfile and docker compose file








